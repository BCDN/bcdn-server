#!/usr/bin/env coffee

path = require 'path'
pkg = require '../package.json'
fs = require 'fs'
version = pkg.version
StandaloneBCDNServer = require('..').StandaloneBCDNServer
opts = require 'optimist'
  .usage 'Usage: $0'
  .options
    timeout:
      demand: false
      alias: 't'
      description: 'connection timeout (milliseconds)'
      default: 5000
    ip_limit:
      demand: false
      alias: 'i'
      description: 'max concurrent connection per IP'
      default: 5000
    concurrent_limit:
      demand: false
      alias: 'c'
      description: 'concurrent limit for the tracker'
      default: 5000
    keys:
      demand: false
      alias: 'k'
      description: 'connection key'
      default: ['bcdn']
    sslkey:
      demand: false
      description: 'path to SSL key'
    sslcert:
      demand: false
      description: 'path to SSL certificate'
    host:
      demand: false
      alias: 'h'
      description: 'host'
      default: '127.0.0.1'
    port:
      demand: true
      alias: 'p'
      description: 'port'
    path:
      demand: false
      description: 'custom path'
      default: '/'
    tracker_id:
      demand: false
      description: 'tracker ID'
      default: null
    trackers:
      demand: false
      description: 'URL list for other trackers'
      default: []
    secret:
      demand: true
      alias: 's'
      description: 'shared secret used for establish tracker communication'
    data:
      demand: false
      alias: 'd'
      description: 'data path'
      default: './data'
  .argv

unless process.env.DEBUG
  process.on 'uncaughtException', (err) ->
    console.error "Error: #{err}"

if opts.sslkey? or opts.sslcert?
  unless opts.sslkey? and opts.sslcert?
    console.error 'Warning: BCDNServer will not run because either' +
      'the key or the certificate has not been provided.'
    process.exit 1

  opts.ssl =
    key: fs.readFileSync path.resolve opts.sslkey
    cert: fs.readFileSync path.resolve opts.sslcert

  delete opts.sslkey
  delete opts.sslcert

userPath = opts.path || '/'
server = new StandaloneBCDNServer opts, (server) ->
  {address, port} = server.address()

  console.log "Started BCDNServer on #{address}, port: #{port}, " +
    "path: #{userPath} (v. #{version})"
